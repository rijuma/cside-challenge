/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutOwnerSlugLayoutImport } from './routes/_layout/$owner/$slug/_layout'
import { Route as LayoutOwnerSlugLayoutIndexImport } from './routes/_layout/$owner/$slug/_layout/index'

// Create Virtual Routes

const LayoutOwnerSlugImport = createFileRoute('/_layout/$owner/$slug')()

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutOwnerSlugRoute = LayoutOwnerSlugImport.update({
  id: '/$owner/$slug',
  path: '/$owner/$slug',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutOwnerSlugLayoutRoute = LayoutOwnerSlugLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => LayoutOwnerSlugRoute,
} as any)

const LayoutOwnerSlugLayoutIndexRoute = LayoutOwnerSlugLayoutIndexImport.update(
  {
    id: '/',
    path: '/',
    getParentRoute: () => LayoutOwnerSlugLayoutRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/$owner/$slug': {
      id: '/_layout/$owner/$slug'
      path: '/$owner/$slug'
      fullPath: '/$owner/$slug'
      preLoaderRoute: typeof LayoutOwnerSlugImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/$owner/$slug/_layout': {
      id: '/_layout/$owner/$slug/_layout'
      path: '/$owner/$slug'
      fullPath: '/$owner/$slug'
      preLoaderRoute: typeof LayoutOwnerSlugLayoutImport
      parentRoute: typeof LayoutOwnerSlugRoute
    }
    '/_layout/$owner/$slug/_layout/': {
      id: '/_layout/$owner/$slug/_layout/'
      path: '/'
      fullPath: '/$owner/$slug/'
      preLoaderRoute: typeof LayoutOwnerSlugLayoutIndexImport
      parentRoute: typeof LayoutOwnerSlugLayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutOwnerSlugLayoutRouteChildren {
  LayoutOwnerSlugLayoutIndexRoute: typeof LayoutOwnerSlugLayoutIndexRoute
}

const LayoutOwnerSlugLayoutRouteChildren: LayoutOwnerSlugLayoutRouteChildren = {
  LayoutOwnerSlugLayoutIndexRoute: LayoutOwnerSlugLayoutIndexRoute,
}

const LayoutOwnerSlugLayoutRouteWithChildren =
  LayoutOwnerSlugLayoutRoute._addFileChildren(
    LayoutOwnerSlugLayoutRouteChildren,
  )

interface LayoutOwnerSlugRouteChildren {
  LayoutOwnerSlugLayoutRoute: typeof LayoutOwnerSlugLayoutRouteWithChildren
}

const LayoutOwnerSlugRouteChildren: LayoutOwnerSlugRouteChildren = {
  LayoutOwnerSlugLayoutRoute: LayoutOwnerSlugLayoutRouteWithChildren,
}

const LayoutOwnerSlugRouteWithChildren = LayoutOwnerSlugRoute._addFileChildren(
  LayoutOwnerSlugRouteChildren,
)

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutOwnerSlugRoute: typeof LayoutOwnerSlugRouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutOwnerSlugRoute: LayoutOwnerSlugRouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/$owner/$slug': typeof LayoutOwnerSlugLayoutRouteWithChildren
  '/$owner/$slug/': typeof LayoutOwnerSlugLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof LayoutIndexRoute
  '/$owner/$slug': typeof LayoutOwnerSlugLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/$owner/$slug': typeof LayoutOwnerSlugRouteWithChildren
  '/_layout/$owner/$slug/_layout': typeof LayoutOwnerSlugLayoutRouteWithChildren
  '/_layout/$owner/$slug/_layout/': typeof LayoutOwnerSlugLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/$owner/$slug' | '/$owner/$slug/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$owner/$slug'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/'
    | '/_layout/$owner/$slug'
    | '/_layout/$owner/$slug/_layout'
    | '/_layout/$owner/$slug/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/",
        "/_layout/$owner/$slug"
      ]
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/$owner/$slug": {
      "filePath": "_layout/$owner/$slug",
      "parent": "/_layout",
      "children": [
        "/_layout/$owner/$slug/_layout"
      ]
    },
    "/_layout/$owner/$slug/_layout": {
      "filePath": "_layout/$owner/$slug/_layout.tsx",
      "parent": "/_layout/$owner/$slug",
      "children": [
        "/_layout/$owner/$slug/_layout/"
      ]
    },
    "/_layout/$owner/$slug/_layout/": {
      "filePath": "_layout/$owner/$slug/_layout/index.tsx",
      "parent": "/_layout/$owner/$slug/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
